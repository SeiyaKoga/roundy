{"version":3,"file":"roundy.cjs.development.js","sources":["../src/Style.tsx","../src/utils.ts","../src/index.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nconst Style = styled.div`\n  display: inline-block;\n  position: absolute;\n  width: 210px;\n  height: 210px;\n  @media screen and (min-width: 768px) {\n    height: 310px;\n    width: 310px;\n  }\n  top: -10px;\n  svg path {\n    opacity: 0.7;\n  }\n  .sliderHandle {\n    width: 50%;\n    pointer-events: all;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform-origin: 0 50%;\n    &:after {\n      content: '';\n      display: block;\n      width: 15px;\n      height: 15px;\n      border-radius: 30px;\n      position: absolute;\n      right: -5px;\n      background: linear-gradient(to top, #fff, #f2f2f2);\n      border: 1px solid #ccc;\n      top: -10px;\n      transform: all ease 0.4s;\n    }\n    &:hover:after {\n      box-shadow: 0 0 10px rgb(37, 205, 247);\n    }\n  }\n  ${({ overrideStyle }) => overrideStyle}\n`;\nexport default Style;\n","import { InternalRoundyProps } from \"types\";\n\nconst DEGREE_IN_RADIANS = Math.PI / 180;\n\nexport const valueToAngle = (value: number = 0, props: InternalRoundyProps) => {\n  const { max, min, arcSize } = props;\n  const angle = ((value - min) / (max - min)) * arcSize;\n  return angle;\n};\n\nexport const getArc = (\n  startAngle: number,\n  endAngle: number,\n  props: InternalRoundyProps\n) => {\n  let { radius, strokeWidth } = props;\n  const pathRadius = radius - strokeWidth / 2;\n  const start = polarToCartesian(pathRadius, startAngle, radius);\n  const end = polarToCartesian(pathRadius, endAngle, radius);\n  const largeArcFlag = startAngle <= 180 ? 0 : 1;\n  return `M ${start} A ${pathRadius} ${pathRadius} 0 ${largeArcFlag} 0 ${end}`;\n};\n\nconst polarToCartesian = (\n  pathRadius: number,\n  angle: number,\n  radius: number\n) => {\n  const angleInRadians = (angle - 180) * DEGREE_IN_RADIANS;\n\n  const x = radius + pathRadius * Math.cos(angleInRadians);\n  const y = radius + pathRadius * Math.sin(angleInRadians);\n\n  return x + ' ' + y;\n};\n\nexport const getCenter = (\n  node: React.MutableRefObject<HTMLDivElement>,\n  radius: number\n) => {\n  var rect = node.current.getBoundingClientRect();\n  return {\n    top: rect.top + radius,\n    left: rect.left + radius,\n  };\n};\n\nexport const limitValue = (value: number, min: number, max: number) => {\n  if (value < min) value = min;\n  if (value > max) value = max;\n  return value;\n};\n\nconst radToDeg = (rad: number) => {\n  return rad * (180 / Math.PI);\n};\n\nexport const getAngle = (y: number, x: number, rotationOffset: number) => {\n  let angle = radToDeg(Math.atan2(y, x)) + 180 - rotationOffset;\n  if (angle > 360) {\n    angle = angle - 360;\n  }\n  if (angle < 0) {\n    angle = 360 + angle;\n  }\n  return angle;\n};\n\nexport const angleToValue = (angle: number, props: InternalRoundyProps) => {\n  const { min, max, arcSize } = props;\n  const v = (angle / arcSize) * (max - min) + min;\n  return v;\n};","import * as React from 'react';\nimport { useDrag } from 'react-use-gesture';\nimport hexoid from 'hexoid';\nimport Style from './Style';\nimport { InternalRoundyProps } from 'types';\nimport {\n  valueToAngle,\n  getCenter,\n  getAngle,\n  angleToValue,\n  limitValue,\n  getArc,\n} from './utils';\n\nconst classNamePrefix = 'RoundSlider';\n\nconst defaultProps: InternalRoundyProps = {\n  color: 'purple',\n  bgColor: '#ccc',\n  max: 100,\n  min: 0,\n  stepSize: 0,\n  // by default we want smooth sliding\n  steps: 0,\n  sliced: true,\n  strokeWidth: 4,\n  rotationOffset: 0,\n  arcSize: 360,\n  value: 50,\n  radius: 105,\n};\n\ninterface StateType {\n  value: number;\n  angle: number;\n}\n\nexport type MainRoundyProps = Partial<InternalRoundyProps> & {\n  render?: (state: StateType, props: InternalRoundyProps) => React.ReactNode;\n  onAfterChange?: (state: any, props: any) => void;\n  onChange?: (state: any, props: any) => void;\n  style?: any;\n  allowClick?: boolean;\n};\n\nfunction Roundy(optProps: MainRoundyProps) {\n  const props = { ...defaultProps, ...optProps };\n  const uniqueId = hexoid(7)();\n  const {\n    color,\n    bgColor,\n    max,\n    min,\n    steps,\n    stepSize,\n    strokeWidth,\n    radius,\n    sliced,\n    style,\n    arcSize,\n    rotationOffset,\n    onAfterChange,\n    allowClick,\n    render,\n    onChange,\n  } = props;\n\n  const _wrapper = React.useRef(null);\n  const _handle = React.useRef(null);\n  const isDrag = React.useRef(false);\n\n  const [state, setAll] = React.useState<StateType>({\n    value: props.value,\n    angle: valueToAngle(props.value, props),\n  });\n\n  const bind = useDrag(({ down, xy: [x, y] }) => {\n    setValueAndAngle(\n      x,\n      y,\n      !down\n        ? newState => {\n            isDrag.current = down;\n            onAfterChange && onAfterChange(newState, props);\n          }\n        : undefined\n    );\n  });\n\n  React.useEffect(() => {\n    if (props.value !== state.value) {\n      const newState = {\n        value: props.value,\n        angle: valueToAngle(props.value, props),\n      };\n      setAll(newState);\n    }\n  }, [props.value]);\n\n  const setState = (obj: Partial<StateType>) =>\n    setAll(prev => ({ ...prev, ...obj }));\n  const { angle } = state;\n  const segments = steps || (stepSize ? Math.floor((max - min) / stepSize) : 0);\n  const maskName = `${classNamePrefix}_${uniqueId}`;\n  const size = radius * 2;\n  const styleRotation = {\n    transform: `rotate(${rotationOffset}deg)`,\n    transformOrigin: '50% 50%',\n  };\n\n  const setValueAndAngle = (\n    x: number,\n    y: number,\n    cb?: (newState: StateType) => void\n  ) => {\n    const { left, top } = getCenter(_wrapper, radius);\n    const dX = x - left;\n    const dY = y - top;\n    const { value, angle } = stepRounding(getAngle(dY, dX, rotationOffset));\n    const newState = { value, angle };\n    setState(newState);\n    if (cb) {\n      cb(newState);\n    }\n    onChange && onChange(value, props);\n  };\n\n  const updateOnClick = event => {\n    if (isDrag.current) {\n      return;\n    }\n    const { clientX, clientY } = event;\n    let eX = clientX,\n      eY = clientY;\n\n    eX = clientX;\n    eY = clientY;\n    setValueAndAngle(eX, eY, newState => {\n      onAfterChange && onAfterChange(newState, props);\n    });\n  };\n\n  const getMaskLine = (segments: number, index: number) => {\n    const { radius, arcSize } = props;\n    const val = (arcSize / segments) * index + 180;\n    const rotateFunction =\n      'rotate(' + val.toString() + ',' + radius + ',' + radius + ')';\n    return (\n      <g key={index} transform={rotateFunction}>\n        <line\n          x1={radius}\n          y1={radius}\n          x2={radius * 2}\n          y2={radius}\n          style={{\n            stroke: 'rgb(0,0,0)',\n            strokeWidth: 2,\n          }}\n        />\n      </g>\n    );\n  };\n\n  const stepRounding = (degree: number) => {\n    const { stepSize, steps, min, max, arcSize } = props;\n    const step = stepSize || (steps ? (max - min) / steps : 1);\n    const { angle: oldAngle } = state;\n    let angToValue = min;\n    if (!isDrag.current) {\n      angToValue = angleToValue(degree, props);\n    } else {\n      angToValue = angleToValue(\n        oldAngle > arcSize - 20 && degree < arcSize / 4\n          ? Math.max(degree, arcSize)\n          : oldAngle < 20 && degree > arcSize - 20\n          ? Math.min(degree, 0)\n          : degree,\n        props\n      );\n    }\n    let value;\n    const remain = (angToValue - min) % step;\n    const currVal = angToValue - remain;\n    const nextVal = limitValue(currVal + step, min, max);\n    const preVal = limitValue(currVal - step, min, max);\n    if (angToValue >= currVal)\n      value = angToValue - currVal < nextVal - angToValue ? currVal : nextVal;\n    else {\n      value = currVal - angToValue > angToValue - preVal ? currVal : preVal;\n    }\n    value = Math.round(value);\n    const ang = valueToAngle(value, props);\n    return { value, angle: ang };\n  };\n  return (\n    <Style\n      className=\"roundy\"\n      onClick={updateOnClick}\n      style={\n        allowClick || render\n          ? style\n          : { ...(style || {}), pointerEvents: 'none' }\n      }\n    >\n      {render ? (\n        <div\n          className=\"roundyRenderPropsParent\"\n          ref={_wrapper}\n          {...bind()}\n          style={{ width: size, height: size, display: 'inline-block' }}\n        >\n          {render(state, props)}\n        </div>\n      ) : (\n        <React.Fragment>\n          <svg ref={_wrapper} width={size} height={size}>\n            {sliced && (\n              <defs>\n                <mask\n                  id={maskName}\n                  maskUnits=\"userSpaceOnUse\"\n                  style={styleRotation}\n                >\n                  <rect x={0} y={0} width={size} height={size} fill=\"white\" />\n                  {Array.from({ length: segments }).map((_, i) => {\n                    return getMaskLine(segments, i);\n                  })}\n                </mask>\n              </defs>\n            )}\n\n            <path\n              fill=\"transparent\"\n              strokeDashoffset=\"0\"\n              strokeWidth={strokeWidth}\n              stroke={bgColor}\n              mask={sliced ? `url(#${maskName})` : undefined}\n              style={styleRotation}\n              d={getArc(Math.min(arcSize, 359.9999), 0, props)}\n            />\n            <path\n              fill=\"none\"\n              strokeWidth={strokeWidth}\n              stroke={color}\n              mask={sliced ? `url(#${maskName})` : undefined}\n              style={styleRotation}\n              d={getArc(Math.min(angle, 359.9999), 0, props)}\n            />\n          </svg>\n          <div\n            ref={_handle}\n            className=\"sliderHandle\"\n            {...bind()}\n            style={{\n              transform: `rotate(${angle + rotationOffset}deg) scaleX(-1)`,\n            }}\n          />\n        </React.Fragment>\n      )}\n    </Style>\n  );\n}\n\nexport default Roundy;\n"],"names":["Style","styled","div","overrideStyle","DEGREE_IN_RADIANS","Math","PI","valueToAngle","value","props","max","min","arcSize","angle","getArc","startAngle","endAngle","radius","strokeWidth","pathRadius","start","polarToCartesian","end","largeArcFlag","angleInRadians","x","cos","y","sin","getCenter","node","rect","current","getBoundingClientRect","top","left","limitValue","radToDeg","rad","getAngle","rotationOffset","atan2","angleToValue","v","classNamePrefix","defaultProps","color","bgColor","stepSize","steps","sliced","Roundy","optProps","uniqueId","hexoid","style","onAfterChange","allowClick","render","onChange","_wrapper","React","_handle","isDrag","state","setAll","bind","useDrag","down","xy","setValueAndAngle","newState","undefined","setState","obj","prev","segments","floor","maskName","size","styleRotation","transform","transformOrigin","cb","dX","dY","stepRounding","updateOnClick","event","clientX","clientY","eX","eY","getMaskLine","index","val","rotateFunction","toString","key","x1","y1","x2","y2","stroke","degree","step","oldAngle","angToValue","remain","currVal","nextVal","preVal","round","ang","className","onClick","pointerEvents","ref","width","height","display","id","maskUnits","fill","Array","from","length","map","_","i","strokeDashoffset","mask","d"],"mappings":"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"}